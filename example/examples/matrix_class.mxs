# Example 3: Matrix Class & Error Handling
# Demonstrates classes, operator overloading and value-based error handling.

import std.io as io;
import std.error.Error as Error;
import std.array.make_array as make_array;

static let println = io.println;

class Matrix {
public:
    Matrix(height: int, width: int) {
        self.height = height;
        self.width = width;
        self.data = make_array<float>(height * width, 0.0);
    }

    operator+(other: Matrix) -> Matrix | Error {
        if self.height != other.height || self.width != other.width {
            return raise Error("ShapeError", msg="Matrix dimensions do not match.");
        }

        let mut result = Matrix(self.height, self.width);
        for i in 0..(self.height * self.width) {
            result.data[i] = self.data[i] + other.data[i];
        }
        return result;
    }

private:
    let height: int;
    let width: int;
    let mut data: [float];
}

func main() -> int {
    let m1 = Matrix(2, 3);
    let m2 = Matrix(2, 3);
    let m3 = Matrix(3, 2);

    let success_result = match (m1 + m2) {
        case res: Matrix => {
            println("Matrix addition successful.");
            res;
        }
        case err: Error => {
            println(err.msg);
            nil;
        }
    };

    let failure_result = match (m1 + m3) {
        case res: Matrix => {
            println("This should not happen.");
            res;
        }
        case err: Error => {
            println("Caught expected error:");
            println(err.msg);
            nil;
        }
    };

    return 0;
}
